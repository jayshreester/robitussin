{"_quickTake.js":{"title":"Quick Take","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport extract from \"string-extract-class-names\";\n\n// extracts classes\nassert.deepEqual(extract(\"div.first-class.second-class\"), [\n  \".first-class\",\n  \".second-class\",\n]);\n\n// and id's\nassert.deepEqual(extract(\"div#brambles.gramples#croodles\"), [\n  \"#brambles\",\n  \".gramples\",\n  \"#croodles\",\n]);\n\n// optionally, you can request ranges (see codsen.com/ranges/):\nassert.deepEqual(extract(\"div.first-class.second-class\", true), [\n  [3, 15],\n  [15, 28],\n]);"},"contrived-complex.js":{"title":"Non-parsing algorithm can tackle really dodgy CSS","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport extract from \"string-extract-class-names\";\n\n// probably invalid input, but works anyway:\nassert.deepEqual(extract(\"?#id1#id2? #id3#id4> p > #id5#id6\"), [\n  \"#id1\",\n  \"#id2\",\n  \"#id3\",\n  \"#id4\",\n  \"#id5\",\n  \"#id6\",\n]);"},"with-space.js":{"title":"Processes whole CSS selectors","content":"import &#x7B; strict as assert &#x7D; from \"assert\";\nimport extract from \"string-extract-class-names\";\n\nassert.deepEqual(extract(\"div.first.second#third a[target=_blank]\"), [\n  \".first\",\n  \".second\",\n  \"#third\",\n]);"}}